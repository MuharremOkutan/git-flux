gitflux_load_settings

usage() {
    echo "usage: git flux up"
}

cmd_default() {
    cmd_up "$@"
}

cmd_up() {
    # sanity check
    require_clean_working_tree
    
    # fetch remote branches
    git fetch -q origin
    
    git_up "Environment" "$ENVIRONMENT_PREFIX"
    git_up "Feature" "$FEATURE_PREFIX"
}

git_up() {
    local branch_type="$1"; shift
    local prefix="$1"; shift
    
    # sanity
    if [ -z "$branch_type" ] || [ -z "$prefix" ]; then
        die "git_up: must specify branch-type and prefix"
    fi
    
    # save our current branch for later
    local current_branch=$(git_current_branch)

    local remote_branches=$(git_remote_branches | sed "s@^origin/@@g" | grep "^$prefix")
    local short_names=$(echo "$remote_branches" | sed "s@^$prefix@@g")

    # determine column width first
    local width=0
    local branch
    for branch in $short_names; do
      local len=${#branch}
      width=$(max $width $len)
    done
    
    width=$(($width+3))
    
    echo 
    echo "Updating $branch_type branches:"
	local branch
	for branch in $short_names; do
		local fullname="${prefix}${branch}"
		local base=$(git merge-base "$fullname" "origin/$fullname")
		local remote_sha=$(git rev-parse "origin/$fullname")
		local branch_sha=$(git rev-parse "$fullname")
		if [ "$fullname" = "$current_branch" ]; then
			printf "* "
		else
			printf "  "
		fi
		printf "%-${width}s" "$branch"
		if [ "$branch_sha" = "$remote_sha" ]; then
			echo "up to date"
			continue
		fi
		if [ "$base" = "$remote_sha" ]; then
		    echo "ahead of upstream"
		    continue
        fi
	    if [ "$base" = "$branch_sha" ]; then
	        echo "fast-forwarding..."
        else
            echo "rebasing..."
        fi
        git rebase -q "origin/$fullname" "$fullname"
	done
    git checkout -q "$current_branch"
}

cmd_help() {
    usage
    exit 0
}